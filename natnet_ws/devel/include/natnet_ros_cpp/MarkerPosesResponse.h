// Generated by gencpp from file natnet_ros_cpp/MarkerPosesResponse.msg
// DO NOT EDIT!


#ifndef NATNET_ROS_CPP_MESSAGE_MARKERPOSESRESPONSE_H
#define NATNET_ROS_CPP_MESSAGE_MARKERPOSESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace natnet_ros_cpp
{
template <class ContainerAllocator>
struct MarkerPosesResponse_
{
  typedef MarkerPosesResponse_<ContainerAllocator> Type;

  MarkerPosesResponse_()
    : num_of_markers(0)
    , x_position()
    , y_position()
    , z_position()  {
    }
  MarkerPosesResponse_(const ContainerAllocator& _alloc)
    : num_of_markers(0)
    , x_position(_alloc)
    , y_position(_alloc)
    , z_position(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _num_of_markers_type;
  _num_of_markers_type num_of_markers;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_position_type;
  _x_position_type x_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_position_type;
  _y_position_type y_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _z_position_type;
  _z_position_type z_position;





  typedef boost::shared_ptr< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MarkerPosesResponse_

typedef ::natnet_ros_cpp::MarkerPosesResponse_<std::allocator<void> > MarkerPosesResponse;

typedef boost::shared_ptr< ::natnet_ros_cpp::MarkerPosesResponse > MarkerPosesResponsePtr;
typedef boost::shared_ptr< ::natnet_ros_cpp::MarkerPosesResponse const> MarkerPosesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator1> & lhs, const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.num_of_markers == rhs.num_of_markers &&
    lhs.x_position == rhs.x_position &&
    lhs.y_position == rhs.y_position &&
    lhs.z_position == rhs.z_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator1> & lhs, const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace natnet_ros_cpp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7367279fedb79f450024191cc1ecd3e";
  }

  static const char* value(const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7367279fedb79f4ULL;
  static const uint64_t static_value2 = 0x50024191cc1ecd3eULL;
};

template<class ContainerAllocator>
struct DataType< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "natnet_ros_cpp/MarkerPosesResponse";
  }

  static const char* value(const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 num_of_markers\n"
"float64[] x_position\n"
"float64[] y_position\n"
"float64[] z_position\n"
;
  }

  static const char* value(const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_of_markers);
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.z_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MarkerPosesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::natnet_ros_cpp::MarkerPosesResponse_<ContainerAllocator>& v)
  {
    s << indent << "num_of_markers: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_of_markers);
    s << indent << "x_position[]" << std::endl;
    for (size_t i = 0; i < v.x_position.size(); ++i)
    {
      s << indent << "  x_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_position[i]);
    }
    s << indent << "y_position[]" << std::endl;
    for (size_t i = 0; i < v.y_position.size(); ++i)
    {
      s << indent << "  y_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_position[i]);
    }
    s << indent << "z_position[]" << std::endl;
    for (size_t i = 0; i < v.z_position.size(); ++i)
    {
      s << indent << "  z_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NATNET_ROS_CPP_MESSAGE_MARKERPOSESRESPONSE_H
